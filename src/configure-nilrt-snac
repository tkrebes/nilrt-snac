#!/bin/bash
# SPDX-License-Identifier: MIT
set -euo pipefail

SCRIPT_ROOT="$(realpath $(dirname ${BASH_SOURCE}))"
source "${SCRIPT_ROOT}/util.sh"

## CONSTANTS
FAILLOCK_CONF=/etc/security/faillock.conf
PAM_CONF=/etc/pam.d/common-auth
OPKG_CONF=/etc/opkg/snac.conf
WIREGUARD_TOOLS_DEB='http://ftp.us.debian.org/debian/pool/main/w/wireguard/wireguard-tools_1.0.20210914-1+b1_amd64.deb'
USBGUARD_SRC_URL="https://github.com/USBGuard/usbguard/releases/download/usbguard-1.1.2/usbguard-1.1.2.tar.gz"


## FUNCTIONS

check_euid_root() {
	# Check that the effective UID of this bash script is root (UID 0). If not,
	# exit with error 2.
	if [ $(id -u) -ne 0 ]; then
		log ERROR "this script must be run as root (uid 0)."
		exit $EX_BAD_ENVIRONEMNT
	fi
}

# Check that iptables is available.
# NOTE: The ip_tables kernel module is only loaded once the first call to iptables has been made, (inlcuding rule creation).
check_iptables() {
	log INFO Checking iptables configuration...

	log DEBUG Installing iptables...
	opkg install iptables

	# This call also ensures that the module gets loaded
	log DEBUG Checking iptables user tools...
	if ! iptables -L; then
		echo ERROR iptables binary
		exit $EX_CHECK_FAILURE
	fi >/dev/null

	# test that ip_tables is in lsmod
	local modules=($(lsmod | tail --lines=+2 | awk '{print($1)}'))
	if grep -qE 'ip_tables'; then
		log DEBUG "check_iptables(): ip_tables module loaded."
	else
		log ERROR ip_tables module is not loaded.
		exit $EX_CHECK_FAILURE
	fi <<<${modules[@]}
}

# Check that the script isn't executing within a safemode context
check_runmode() {
	if test -e /etc/natinst/safemode; then
		log ERROR Script is executing in a safemode context.
		exit $EX_BAD_ENVIRONEMNT
	fi
}

# Check that the script is running on NI LinuxRT
check_nilrt() {
	if grep -qE '^ID=nilrt$' /etc/os-release; then
		return
	else
		log ERROR os-release:ID does not match NILRT. This script must only be run on NILRT systems.
		exit $EX_BAD_ENVIRONEMNT
	fi
}

configure_ntp() {
	log INFO Configuring NTP...
	# As of NILRT 24.3, all the NTP packages are in the extra/ feed. :(
	opkg update >/dev/null && opkg install ntp
	# remove default server configurations
	log DEBUG Switching ntp servers to US mil.
	sed -i '/^server .*/d' /etc/ntp.conf
	echo "server 0.us.pool.ntp.mil iburst maxpoll 16" >>/etc/ntp.conf
	/etc/init.d/ntpd restart
}

configure_opkg() {
	log INFO Configuring opkg...

	echo "# NILRT SNAC configuration opkg runparts. Do not hand-edit." >"${OPKG_CONF}"
	echo "option autoremove 1" >>"${OPKG_CONF}"

	log DEBUG Removing unsupported package feeds...
	rm -fv /etc/opkg/NI-dist.conf
	# TODO Uncomment this once we have moved all necessary packages into the core feeds.
	#sed -i '/^src.*\/extra\/.*/d' /etc/opkg/base-feeds.conf

	opkg update
}

configure_usbguard() {
	log INFO Installing USBGuard...
	mkdir -p /usr/local/src
	rm -rf /usr/local/src/usbguard*
	wget "${USBGUARD_SRC_URL}" -O - | tar xz -f - -C /usr/local/src
	pushd /usr/local/src/usbguard*

	opkg update >/dev/null && opkg install libqb-dev
	./configure --with-crypto-library=openssl --with-bundled-catch --with-bundled-pegtl --without-dbus --without-polkit --prefix=/
	make install
	# TODO: make initscript
	popd
}

configure_wireguard() {
	log INFO Installing wireguard-tools...
	opkg update >/dev/null && opkg install busybox  # contains wget
	wget "${WIREGUARD_TOOLS_DEB}" -O ./wireguard-tools.deb
	echo "arch amd64 15" >>"${OPKG_CONF}"
	opkg install --force-reinstall ./wireguard-tools.deb
	log INFO DONE. wireguard-tools "(wg)" is now installed.

	# Install and setup wireguard
	# TODO: key management?
	log INFO Configuring wireguard...
	ip link del dev wg0 || true  # its OK for the wg dev to not exist yet
	ip link add dev wg0 type wireguard
}

install_cryptsetup() {
	log INFO Installing cryptsetup...
	opkg update >/dev/null && opkg install cryptsetup
}

# Rips niauth out of the system.
remove_niauth() {
	log INFO Removing NIAuth...

	# Manually remove the 'Essential' mark on NI-Auth and its siblings, so that they can be removed.
	#trap "opkg update >/dev/null" EXIT

	#sed -i '/Essential: yes/d' /var/lib/opkg/status
	opkg remove --force-removal-of-essential-packages --force-depends ni-auth
	passwd -d root
	log DEBUG root account password deleted.

	#opkg update >/dev/null  # undoes the remarking we just did
	trap - EXIT
}

# Install and configure pam-plugin-faillock.
# Any non-root account will get locked after 3 failed authentications within 15 minutes.
configure_faillock() {
	log INFO Configuring faillock...

	log DEBUG Installing pam-plugin-faillock...
	opkg install pam-plugin-faillock

	log DEBUG Configuring faillock settings...
	sed -i 's/^# audit$/audit/' "${FAILLOCK_CONF}"
	sed -i 's/^# silent$/silent/' "${FAILLOCK_CONF}"
	sed -i 's/^# deny = 3$/deny = 3/' "${FAILLOCK_CONF}"
	sed -i 's/^# fail_interval = 900$/fail_interval = 900/' "${FAILLOCK_CONF}"
	sed -i 's/^# unlock_time = 600$/unlock_time = 0/' "${FAILLOCK_CONF}"

	log DEBUG Enabling faillock...
	sed -E -i 's/^(.+)success=1(.+)$/auth    requisite pam_faillock.so preauth\n\1success=2\2\nauth    [default=die] pam_faillock.so authfail/' "${PAM_CONF}"
	echo "auth    sufficient pam_faillock.so authsucc" >>"${PAM_CONF}"
}


## MAIN
# runtime environment safety checks
check_euid_root
check_nilrt
check_runmode

syslog notice SNAC configuration utility activated.

WORKSPACE=$(mktemp -d --suffix=nilrt-snac)
trap "test -e ${WORKSPACE} && rm -rfv ${WORKSPACE}" EXIT
cd ${WORKSPACE}

configure_opkg

remove_niauth

configure_wireguard

log INFO Checking that ip_tables is loaded...
check_iptables

log INFO Disabling console output...
nirtcfg --set section="systemsettings",token="consoleout.enabled",value="False"
# requires reboot to take effect ^. Can we get around this?

log INFO Removing the X11 stack...
opkg remove packagegroup-core-x11 packagegroup-ni-xfce
opkg remove '*xfce4*-locale-ja*'  # where do these come from !?!

#configure_usbguard   # TODO: doesn't work yet.

install_cryptsetup

configure_ntp

configure_faillock

syslog notice SNAC configuration completed.
exit 0
