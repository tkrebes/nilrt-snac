#!/bin/bash
# SPDX-License-Identifier: MIT
set -euo pipefail

SCRIPT_ROOT="$(realpath $(dirname ${BASH_SOURCE}))"
PREFIX_ROOT="$(realpath ${SCRIPT_ROOT}/../../)"
source "${SCRIPT_ROOT}/util.sh"

## CONSTANTS
OPKG_CONF=/etc/opkg/snac.conf
WIREGUARD_TOOLS_DEB='http://ftp.us.debian.org/debian/pool/main/w/wireguard/wireguard-tools_1.0.20210914-1+b1_amd64.deb'
USBGUARD_SRC_URL="https://github.com/USBGuard/usbguard/releases/download/usbguard-1.1.2/usbguard-1.1.2.tar.gz"


## FUNCTIONS

check_euid_root() {
	# Check that the effective UID of this bash script is root (UID 0). If not,
	# exit with error 2.
	if [ $(id -u) -ne 0 ]; then
		log ERROR "this script must be run as root (uid 0)."
		exit $EX_BAD_ENVIRONEMNT
	fi
}

# Check that iptables is available.
# NOTE: The ip_tables kernel module is only loaded once the first call to iptables has been made, (inlcuding rule creation).
check_iptables() {
	log INFO Checking iptables configuration...
	
	log DEBUG Installing iptables...
	opkg install iptables

	# This call also ensures that the module gets loaded
	log DEBUG Checking iptables user tools...
	if ! iptables -L; then
		echo ERROR iptables binary 
		exit $EX_CHECK_FAILURE
	fi >/dev/null

	# test that ip_tables is in lsmod
	local modules=($(lsmod | tail --lines=+2 | awk '{print($1)}'))
	if grep -qE 'ip_tables'; then
		log DEBUG "check_iptables(): ip_tables module loaded."
	else
		log ERROR ip_tables module is not loaded.
		exit $EX_CHECK_FAILURE
	fi <<<${modules[@]}
}

# Check that the script isn't executing within a safemode context
check_runmode() {
	if test -e /etc/natinst/safemode; then
		log ERROR Script is executing in a safemode context.
		exit $EX_BAD_ENVIRONEMNT
	fi
}

# Check that the script is running on NI LinuxRT
check_nilrt() {
	if grep -qE '^ID=nilrt$' /etc/os-release; then
		return
	else
		log ERROR os-release:ID does not match NILRT. This script must only be run on NILRT systems.
		exit $EX_BAD_ENVIRONEMNT
	fi
}

configure_ntp() {
	log INFO Configuring NTP...
	# As of NILRT 24.3, all the NTP packages are in the extra/ feed. :(
	opkg update >/dev/null && opkg install ntp
	# remove default server configurations
	log DEBUG Switching ntp servers to US mil.
	sed -i '/^server .*/d' /etc/ntp.conf
	echo "server 0.us.pool.ntp.mil iburst maxpoll 16" >>/etc/ntp.conf
	/etc/init.d/ntpd restart
}

configure_opkg() {
	log INFO Configuring opkg...

	echo "# NILRT SNAC configuration opkg runparts. Do not hand-edit." >"${OPKG_CONF}"
	echo "option autoremove 1" >>"${OPKG_CONF}"
	
	log DEBUG Removing unsupported package feeds...
	rm -fv /etc/opkg/NI-dist.conf
	# TODO Uncomment this once we have moved all necessary packages into the core feeds.
	#sed -i '/^src.*\/extra\/.*/d' /etc/opkg/base-feeds.conf

	opkg update
}

configure_usbguard() {
	log INFO Installing USBGuard...
	mkdir -p /usr/local/src
	rm -rf /usr/local/src/usbguard*
	wget "${USBGUARD_SRC_URL}" -O - | tar xz -f - -C /usr/local/src
	pushd /usr/local/src/usbguard*

	opkg update >/dev/null && opkg install libqb-dev
	./configure --with-crypto-library=openssl --with-bundled-catch --with-bundled-pegtl --without-dbus --without-polkit --prefix=/
	make install
	# TODO: make initscript
	popd
}

configure_wireguard() {
	# pre-installed by nilrt-snac
	local wireguard_sysconf="/etc/wireguard"
	local conffile="${wireguard_sysconf}/wglv0.conf"
	# </>
	# generated by this function
	local privatekey="${wireguard_sysconf}/wglv0.privatekey"
	local publickey="${wireguard_sysconf}/wglv0.publickey"
	# </>

	log INFO Installing wireguard-tools...
	opkg update >/dev/null && opkg install busybox  # contains wget
	wget "${WIREGUARD_TOOLS_DEB}" -O ./wireguard-tools.deb
	echo "arch amd64 15" >>"${OPKG_CONF}"
	opkg install --force-reinstall ./wireguard-tools.deb
	log INFO DONE. wireguard-tools "(wg)" is now installed.

	# Exclude interface wglv0 from ifplugd rules.
	if ! grep -q -E '^ARGS_wglv0.*' /etc/ifplugd/ifplugd.conf; then
		cat >>/etc/ifplugd/ifplugd.conf <<-EOF

			# This assignment block is managed by the nilrt-snac package.
			ARGS_wglv0="\$ARGS --no-auto"
			# endblock
		EOF
	fi

	# Only generate a new keypair if a private key is not already configured.
	if ! grep -q -E '^PrivateKey = .+' "${conffile}"; then
		log INFO Generating wireguard keypair.

		local old_umask=$(umask)
		umask 177  # mode=0600
		test -f "${privatekey}" || \
			wg genkey | \
				tee "${privatekey}" | \
				wg pubkey >"${publickey}"
		umask $old_umask
	fi

	# Initialize the wglv0 interface on startup.
	update-rc.d ni-wireguard-labview start 03 3 4 5 . stop 05 0 6 .
	/etc/init.d/ni-wireguard-labview restart
}

install_cryptsetup() {
	log INFO Installing cryptsetup...
	opkg update >/dev/null && opkg install cryptsetup
}

# Rips niauth out of the system.
remove_niauth() {
	log INFO Removing NIAuth...
	
	# Manually remove the 'Essential' mark on NI-Auth and its siblings, so that they can be removed.
	#trap "opkg update >/dev/null" EXIT

	#sed -i '/Essential: yes/d' /var/lib/opkg/status
	opkg remove --force-removal-of-essential-packages --force-depends ni-auth
	opkg install "${PREFIX_ROOT}/share/nilrt-snac/nilrt-snac-conflicts.ipk"
	passwd -d root
	log DEBUG root account password deleted.

	#opkg update >/dev/null  # undoes the remarking we just did
	trap - EXIT
}

disable_wifi() {
	log INFO Disabling WiFi...
	cat <<EOF >/etc/modprobe.d/snac_blacklist.conf
# Do not allow WiFi connections
# We cannot use the blacklist keyword because they will still be loaded
# when another module depends on them. This will prevent the modules from
# being loaded along with any modules that depends on them.
install cfg80211 /bin/true
install mac80211 /bin/true
EOF

	# unload the modules if they are already loaded
	# This will most likely error so send the output to /dev/null
	set +e
	rmmod cfg80211 mac80211 >/dev/null 2>&1
	set -e
}


## MAIN
# runtime environment safety checks
check_euid_root
check_nilrt
check_runmode

syslog notice SNAC configuration utility activated.

WORKSPACE=$(mktemp -d --suffix=nilrt-snac)
trap "test -e ${WORKSPACE} && rm -rfv ${WORKSPACE}" EXIT
cd ${WORKSPACE}

configure_opkg

remove_niauth

configure_wireguard

log INFO Checking that ip_tables is loaded...
check_iptables

log INFO Disabling console output...
nirtcfg --set section="systemsettings",token="consoleout.enabled",value="False"
# requires reboot to take effect ^. Can we get around this?

log INFO Removing the X11 stack...
opkg remove packagegroup-core-x11 packagegroup-ni-xfce
opkg remove '*xfce4*-locale-ja*'  # where do these come from !?!

#configure_usbguard   # TODO: doesn't work yet.

install_cryptsetup

configure_ntp

disable_wifi

syslog notice SNAC configuration completed.
exit 0
